services:
  app:
    image: node:14-alpine
    container_name: app
    volumes:
      - type: bind
        source: ./api
        target: /app
    working_dir: /app
    restart: always
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    depends_on:
      db:
        condition: service_healthy
      npm:
        condition: service_completed_successfully
    command: [ 'npx', 'nodemon' ]
    networks:
      - backend

  npm:
    image: node:14-alpine
    container_name: npm
    volumes:
      - type: bind
        source: ./api
        target: /app
    working_dir: /app
    restart: "no"
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    depends_on:
      db:
        condition: service_healthy
    command: [ 'npm', 'i' ]
    networks:
      - backend

  db:
    image: mongo:6.0.2
    container_name: db
    restart: always
    ports:
      - protocol: tcp
        published: ${MONGO_PORT}
        target: 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-web3idpre}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-web3idpre}
    volumes:
      - type: volume
        source: mongo
        target: /data/db
      - type: bind
        source: ./init/mongo-init.js
        target: /docker-entrypoint-initdb.d/mongo-init.js
        read_only: true
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 10s
      retries: 50
      start_period: 3s
    networks:
      - backend

  proxy:
    image: nginx:alpine
    container_name: proxy
    restart: always
    ports:
      - protocol: tcp
        published: ${WEB_PORT}
        target: 443
    volumes:
      - type: bind
        source: ./nginx/proxy.conf
        target: /etc/nginx/conf.d/default.conf
      - type: bind
        source: ${SSL_CRT}
        target: /etc/nginx/ssl.crt
      - type: bind
        source: ${SSL_KEY}
        target: /etc/nginx/ssl.key
    networks:
      - frontend
      - backend

  proxy-files:
    image: nginx:alpine
    container_name: proxy-files
    restart: always
    ports:
      - protocol: tcp
        published: ${FILE_WEB_PORT}
        target: 443
    volumes:
      - type: bind
        source: ./nginx/proxy-files.conf
        target: /etc/nginx/conf.d/default.conf
      - type: bind
        source: ${FILE_SSL_CRT}
        target: /etc/nginx/ssl.crt
      - type: bind
        source: ${FILE_SSL_KEY}
        target: /etc/nginx/ssl.key
      - type: bind
        source: ${FILE_DATA_DIR}
        target: /data/files
    networks:
      - frontend
      - backend

volumes:
  mongo: {}

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
